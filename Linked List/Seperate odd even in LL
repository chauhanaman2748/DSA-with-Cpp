/*
 * Definition for linked list.
 * class Node {
 *  public:
 *		int data;
 *		Node *next;
 *		Node() : data(0), next(nullptr) {};
 *		Node(int x) : data(x), next(nullptr) {}
 *		Node(int x, Node *next) : data(x), next(next) {}
 * };
 */

Node *segregateEvenOdd(Node *head)
{
    // Write your code here
    vector<int> num;
    Node *temp = head;

    while (temp != nullptr)
    {
        if (temp->data % 2 == 0)
            num.push_back(temp->data);
        temp = temp->next;
    }

    temp = head;

    while (temp != nullptr)
    {
        if (temp->data % 2 == 1)
            num.push_back(temp->data);
        temp = temp->next;
    }

    temp = head;
    int i = 0;

    while (temp != nullptr)
    {
        temp->data = num[i];
        temp = temp->next;
        i++;
    }

    return head;
}

// 2 approach
Node *segregateEvenOdd(Node *head)
{
    if (head == nullptr || head->next == nullptr)
    {
        return head;
    }

    Node *EvenHead = nullptr;
    Node *OddHead = nullptr;
    Node *Even = nullptr;
    Node *Odd = nullptr;

    while (head != nullptr)
    {
        if (head->data % 2 == 0)
        {
            if (EvenHead == nullptr)
            {
                EvenHead = head;
                Even = head;
            }
            else
            {
                Even->next = head;
                Even = Even->next;
            }
        }

        else
        {
            if (OddHead == nullptr)
            {
                OddHead = head;
                Odd = head;
            }
            else
            {
                Odd->next = head;
                Odd = Odd->next;
            }
        }

        head = head->next;
    }

    if (Even)
    {
        Even->next = OddHead;
    }
    if (Odd)
    {
        Odd->next = nullptr;
    }

    return EvenHead ? EvenHead : OddHead;
}
